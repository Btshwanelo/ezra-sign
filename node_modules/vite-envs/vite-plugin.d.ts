import type { ResolvedConfig } from "vite";
export declare function viteEnvs(params?: {
    computedEnv?: Record<string, unknown> | ((params: {
        resolvedConfig: ResolvedConfig;
        declaredEnv: Record<string, string>;
        dotEnvLocal: Record<string, string>;
    }) => Promise<Record<string, unknown>> | Record<string, unknown>);
    /** Default: .env */
    declarationFile?: string;
    /**
     * Default: false
     * Enabling this option requires to have Node available in the container.
     * See documentation for more information.
     */
    indexAsEjs?: boolean;
    /**
     * Default: ({ appRootDirPath }) => pathJoin(appRootDirPath, "src", "vite-env.d.ts")
     */
    ambientModuleDeclarationFilePath?: string | ((params: {
        appRootDirPath: string;
    }) => string);
    /**
     * Default: "__VITE_ENVS"
     * Provide this value if you want to change name of the global var (in MFE context for example).
     * Should not be a key of window or self object, best practice is using "__" as prefix.
     */
    nameOfTheGlobal?: string;
}): any;
